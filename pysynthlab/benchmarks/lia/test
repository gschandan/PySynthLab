Problem:
(set-logic LIA)
(synth-fun f ((x Int) (y Int)) Int)
(declare-var x Int)
(declare-var y Int)
(constraint (= (f x y) (f y x)))
(constraint (and (<= x (f x y)) (<= y (f x y))))

verification file 1 (negated and conjoined the constraints):
(set-logic LIA)
(define-fun f ((x Int) (y Int)) Int x )
(declare-fun x () Int)
(declare-fun y ()Int)
(assert(or (not(= (f x y) (f y x))) (not (and (<= x (f x y)) (<= y (f x y))))))
(check-sat)
(get-model)

counter example:
cvc5 small.smt2 --produce-models
sat
(
(define-fun x () Int (- 1))
(define-fun y () Int 0)
)

Look for example that is sat when x = -1 and y = 0

synthesis guess 2:
(define-fun f ((x Int) (y Int)) Int 0 )

verification file 2:
(set-logic LIA)

(define-fun f ((x Int) (y Int)) Int 0 )

(declare-fun x () Int)
(declare-fun y ()Int)
(assert(or (not(= (f x y) (f y x)))
        (not (and (<= x (f x y))
             (<= y (f x y))))))

(check-sat)
(get-model)

counter example:
counterexaple 2: sat
(
(define-fun x () Int 1)
(define-fun y () Int 0)
)
counterexamples - check problem just for counterexamples rather than running against whole verifier
continue enumerating until something works for counterexamples
synthesis guess 3:
(define-fun f ((x Int) (y Int)) Int (ite (<= x y) y x))
No counterexample

(set-logic LIA)

(define-fun f ((x Int) (y Int)) Int (ite (<= x y) y x))

(declare-fun x () Int)
(declare-fun y ()Int)
(assert(or (not(= (f x y) (f y x)))
(not (and (<= x (f x y)) (<= y (f x y))))))
(check-sat)
(get-model)

Need to disjunction assertion one and 2
new query - against same constraints - only needs to work when x = 0 and y =1
or with another counter example

(assert(or (not(= (f x y) (f y x)))
(not (and (<= x (f x y)) (<= y (f x y))))))

counterexamples - check problem just for counterexamples rather than running against whole verifier
separate verifier

basic cegis -> writeup
literature -> how to modify the code to implement variations and documentation and comparisons
i.e. as a researcher how to implement


(set-logic LIA)

(define-fun f ((x Int) (y Int)) Int (ite (<= x y) y x))

(declare-fun x () Int)
(declare-fun y ()Int)
(assert(or (not(= (f x y) (f y x)))
        (not (and (<= x (f x y))
             (<= y (f x y))))))
(check-sat)
(get-model)