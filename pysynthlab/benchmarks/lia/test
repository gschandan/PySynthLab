verification file 1:

(set-logic LIA)
(define-fun f ((x Int) (y Int)) Int x )
(declare-fun x () Int)
(declare-fun y ()Int)
(assert(or (not(= (f x y) (f y x)))
(not (and (<= x (f x y)) (<= y (f x y))))))
(check-sat)
(get-model)

counter example:
cvc5 small.smt2 --produce-models
sat
(
(define-fun x () Int (- 1))
(define-fun y () Int 0)
(define-fun f ((x!0 Int) (x!1 Int)) Int x!1)
)

Look for example that is sat when x = -1 and y = 0

synthesis guess 2:
(define-fun f ((x Int) (y Int)) Int 0 )

verification file 2:
(set-logic LIA)

(define-fun f ((x Int) (y Int)) Int 0 )

(declare-fun x () Int)
(declare-fun y ()Int)
(assert(or (not(= (f x y) (f y x)))
(not (and (<= x (f x y)) (<= y (f x y))))))

(check-sat)
(get-model)

counter example:
counterexaple 2: sat
(
(define-fun x () Int 1)
(define-fun y () Int 0)
)

continue enumerating until something works for counterexamples
synthesis guess 3:
(define-fun f ((x Int) (y Int)) Int (ite (<= x y) y x))
No counterexample